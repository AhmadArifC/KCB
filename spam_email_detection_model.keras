from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dropout, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.preprocessing import StandardScaler
import pandas as pd

# Load dataset
# Untuk data training
train_data = pd.read_excel('/content/drive/MyDrive/colab/spambase_train.xlsx')

# Untuk data validasi
val_data = pd.read_excel('/content/drive/MyDrive/colab/spambase_validation.xlsx')

# Untuk data testing
test_data = pd.read_excel('/content/drive/MyDrive/colab/spambase_test.xlsx')

# Pisahkan fitur dan target
X_train = train_data.drop('class', axis=1)
y_train = train_data['class']
X_val = val_data.drop('class', axis=1)
y_val = val_data['class']
X_test = test_data.drop('class', axis=1)
y_test = test_data['class']

# Normalisasi fitur
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Membuat model RNN dengan Tanh activation function
model = Sequential()

# Lapisan pertama RNN dengan 128 unit dan Tanh activation
model.add(SimpleRNN(128, activation='tanh', input_shape=(X_train_scaled.shape[1], 1)))
model.add(Dropout(0.1))  # Dropout untuk mencegah overfitting

# Lapisan output dengan sigmoid untuk klasifikasi biner
model.add(Dense(1, activation='sigmoid'))

# Compile model
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Menambahkan EarlyStopping dan ReduceLROnPlateau untuk kontrol training
early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6)

# Train model dengan 100 epochs
history = model.fit(
    X_train_scaled, y_train, epochs=100, batch_size=32,
    validation_data=(X_val_scaled, y_val), callbacks=[early_stop, lr_scheduler]
)

# Menyimpan model yang telah dilatih
model.save('spam_email_detection_model.keras')

# Evaluasi model
test_loss, test_acc = model.evaluate(X_test_scaled, y_test)
print(f"Test accuracy: {test_acc * 100:.2f}%")
